import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import logging

# Set up logging for error handling and debugging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Define stock tickers
tickers = [
    'AAPL',  # Apple
    'GOOGL', # Alphabet (Google)
    'WFC',   # Wells Fargo
    'TASK',  # TaskUs
    'KO',    # Coca Cola
    'BA',    # Boeing
    'LMT',   # Lockheed Martin
    'SBUX',  # Starbucks
    'NVDA',  # Nvidia
    'RTX',   # Raytheon Technologies
    'ACN',   # Accenture
    'SSNLF', # Samsung (OTC ticker, may have limited data)
    'VZ',    # Verizon
    'DXTR',  # Dexter (assuming OTC or placeholder; verify ticker)
    'T'      # AT&T
]

# Monte Carlo simulation parameters
NUM_SIMULATIONS = 1000  # Number of simulation paths
NUM_DAYS = 252         # Number of trading days (1 year)
RISK_FREE_RATE = 0.02  # Annual risk-free rate (2%)

def fetch_stock_data(ticker, start_date, end_date):
    """Fetch historical stock data for a given ticker."""
    try:
        stock = yf.Ticker(ticker)
        df = stock.history(start=start_date, end=end_date)
        if df.empty:
            logging.warning(f"No data retrieved for {ticker}")
            return None
        return df['Close']
    except Exception as e:
        logging.error(f"Error fetching data for {ticker}: {e}")
        return None

def calculate_parameters(prices):
    """Calculate historical returns, volatility, and last price."""
    if prices is None or len(prices) < 2:
        return None, None, None
    returns = np.log(prices / prices.shift(1)).dropna()
    mu = returns.mean() * 252  # Annualized mean return
    sigma = returns.std() * np.sqrt(252)  # Annualized volatility
    last_price = prices.iloc[-1]
    return mu, sigma, last_price

def monte_carlo_simulation(last_price, mu, sigma, num_days, num_simulations):
    """Run Monte Carlo simulation using Geometric Brownian Motion."""
    dt = 1 / 252  # Time increment (1 trading day)
    simulation = np.zeros((num_days, num_simulations))
    simulation[0] = last_price

    for t in range(1, num_days):
        # Generate random shocks
        z = np.random.normal(0, 1, num_simulations)
        # GBM formula: S_t = S_{t-1} * exp((mu - sigma^2/2) * dt + sigma * sqrt(dt) * Z)
        drift = (mu - 0.5 * sigma ** 2) * dt
        diffusion = sigma * np.sqrt(dt) * z
        simulation[t] = simulation[t - 1] * np.exp(drift + diffusion)
    
    return simulation

def plot_simulations(ticker, simulation):
    """Plot Monte Carlo simulation results."""
    plt.figure(figsize=(10, 6))
    plt.plot(simulation, alpha=0.1, color='blue')
    plt.title(f'Monte Carlo Simulation: {ticker} Stock Price')
    plt.xlabel('Trading Days')
    plt.ylabel('Stock Price ($)')
    plt.grid(True)
    plt.savefig(f'{ticker}_monte_carlo.png')
    plt.close()

def main():
    # Define date range for historical data (1 year of past data)
    end_date = datetime.today()
    start_date = end_date - timedelta(days=365)

    # DataFrame to store summary statistics
    summary = pd.DataFrame(columns=['Ticker', 'Last_Price', 'Mean_Return', 'Volatility', 'Final_Mean_Price'])

    for ticker in tickers:
        logging.info(f"Processing {ticker}")
        
        # Fetch historical data
        prices = fetch_stock_data(ticker, start_date, end_date)
        if prices is None:
            logging.warning(f"Skipping {ticker} due to missing data")
            continue

        # Calculate parameters
        mu, sigma, last_price = calculate_parameters(prices)
        if mu is None:
            logging.warning(f"Skipping {ticker} due to insufficient data")
            continue

        # Run Monte Carlo simulation
        simulation = monte_carlo_simulation(last_price, mu, sigma, NUM_DAYS, NUM_SIMULATIONS)
        
        # Calculate summary statistics
        final_prices = simulation[-1]
        mean_final_price = np.mean(final_prices)
        
        # Store results
        summary = pd.concat([summary, pd.DataFrame({
            'Ticker': [ticker],
            'Last_Price': [last_price],
            'Mean_Return': [mu],
            'Volatility': [sigma],
            'Final_Mean_Price': [mean_final_price]
        })], ignore_index=True)

        # Plot results
        plot_simulations(ticker, simulation)

    # Save summary to CSV
    summary.to_csv('stock_simulation_summary.csv', index=False)
    logging.info("Simulation complete. Summary saved to 'stock_simulation_summary.csv'")

if __name__ == "__main__":
    main()
